; Number of generations
ngen 10000

; Population count
mu 1000

; Offspring count
lambda 500

; The graph we want to approach
graph "graphs/jeffress.graph"

; Edge operations to use and their relative frequencies
edge_ops {
    Output 1
    Save 1
    Restore 1
    Split 1
    Merge 1
    Next 1
    Parent 1
    Reverse 1
;    SetNodeWeight 1
;    SetEdgeWeight 1
    IncNodeWeight 1
    DecNodeWeight 1
    IncEdgeWeight 1
    DecEdgeWeight 1
}

; Variation operations to use and their relative frequencies
var_ops {
; Copy 1
    Mutate 10
    Crossover 1
}

rule_mut_ops {
    ModifyCondition 1
    ModifyProduction 4
}

rule_prod_mut_ops {
    ReplaceSymbol 4
    ModifyParameter 8
    InsertSequence 2
    DeleteSequence 1
}

flat_expr_ops {
; Zero 1
; One 1
; Euler 1
; Pi 1
    ConstClosed01 10
; ConstOpen01Reciproc 1
    Param 1

}

recursive_expr_ops {
; Reciprocz 1
    Add 2
    Sub 2
;    Mul 1
;    Divz 1
}

; objectives and their thresholds (when to stop optimization)
objectives {
;    StronglyConnectedComponents 1.0
    NeighborMatchingMaxDeg 0.1
    NeighborMatchingEdgeWeightsMaxDeg 0.1
;    TriadicDistance 0.0
}

; Random seeds
;seed [7165983815552241346 16605419685912399888]
seed [4912570626598096220 7612794380552793931]


; genome { rules 10 symbol_arity 2 initial_len 1 max_iter 3 prob_terminal 0.7}
;genome { rules 5 symbol_arity 2 initial_len 1 max_iter 2 prob_terminal 0.7}
;genome { rules 1 symbol_arity 2 initial_len 1 max_iter 2 prob_terminal 0.7}
;genome { rules 1 symbol_arity 2 initial_len 1 max_iter 1 prob_terminal 0.7}
genome { rules 1 symbol_arity 2 initial_len 1 max_iter 1 prob_terminal 0.9 num_params 0 }
